# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: build (${{ matrix.os }}, ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up latest uv and Python ${{ matrix.python-version }}
      uses: astral-sh/setup-uv@v6
      with:
        python-version: ${{ matrix.python-version }}
        activate-environment: true
    - name: Install / build
      run: |
        uv pip install .
        
  test:
    name: test (ubuntu-latest, ${{ matrix.python-version }}, ${{ matrix.pint }} Pint, packages version ${{ matrix.version }})
    runs-on: "ubuntu-latest"
    env:
      poetry_version: 2.1.3
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        pint: ["with", "without"]
        version: ["lock"]
        include:
          - python-version: "3.10"
            version: "minimal"
            pint: "with"
          - python-version: "3.13"
            version: "maximal"
            pint: "with"
    steps:
    - uses: actions/checkout@v4
    - name: Install poetry
      run: pipx install poetry==${{ env.poetry_version }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'
    - name: Install udunits
      run: sudo apt-get install -y libudunits2-dev
    - name: update lock file
      if: matrix.version == 'maximal'
      run: poetry update
    - name: Install dependencies
      run: |
        poetry install --with dev
        poetry run pip install cf_units==3.3.0
    - if: matrix.pint == 'with'
      name: Install pint and pint-xarray
      run: |
        poetry install -E pint
    - name: use minimal versions for lock file
      if: matrix.version == 'minimal'
      run: |
        cp pyproject.toml pyproject.toml.bak
        pipx install uv
        uvx migrate-to-uv
        uv add --active "toolz>=0.12.0" "appnope>=0.1.0" "decorator>=5.1.1" "python-json-logger>2.0.4" "matplotlib>=3.5.0" "bleach>5.0.0" --frozen
        uv lock --resolution lowest
        uv pip freeze > requirements.txt
        poetry run pip install -r requirements.txt
        cp pyproject.toml.bak pyproject.toml
    - name: Test with pytest
      run: |
        poetry run pytest gsw_xarray/tests
